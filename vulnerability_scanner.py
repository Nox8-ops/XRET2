import requests
import re
import argparse
import os
from tqdm import tqdm
import json
from datetime import datetime

# Banner
banner = """
██████╗ ██╗  ██╗███████╗████████╗
██╔══██╗██║ ██╔╝██╔════╝╚══██╔══╝
██████╔╝█████╔╝ █████╗     ██║   
██╔═══╝ ██╔═██╗ ██╔══╝     ██║   
██║     ██║  ██╗███████╗   ██║   
╚═╝     ╚═╝  ╚═╝╚══════╝   ╚═╝   
                                  
XRET Vulnerability Scanner v2.3.0-beta
Developed by Nox8
"""

print(banner)

# Global results dictionary
results = {}

# Function to check for SQL Injection vulnerability
def check_sql_injection(url):
    sql_payloads = [
        "'", "' OR '1'='1", "' AND '1'='1", "1' OR '1'='1", "1' AND '1'='1",
        "';--", "' OR 'a'='a", "' OR 1=1--", "' OR 'a'='a' --", "' OR 1=1 #"
    ]
    for payload in tqdm(sql_payloads, desc="Checking SQL Injection"):
        test_url = url + ("/" if not url.endswith("/") else "") + payload
        try:
            start_time = datetime.now()
            response = requests.get(test_url, allow_redirects=True)
            response_time = (datetime.now() - start_time).total_seconds()
            if "error" in response.text.lower() or "sql" in response.text.lower():
                print(f"Payload '{payload}' indicates potential SQL Injection vulnerability.")
                results['sql_injection'] = {"vulnerable": True, "payload": payload, "response_time": response_time}
                return True
        except requests.exceptions.RequestException as e:
            print(f"Error checking SQL injection on {test_url}: {e}")
    results['sql_injection'] = {"vulnerable": False}
    return False

# Function to check for XSS vulnerability
def check_xss(url):
    xss_payloads = [
        "<script>alert('XSS')</script>", "<img src='x' onerror='alert(1)'>",
        "<body onload=alert('XSS')>", "<svg onload=alert(1)>", 
        "><script>alert(1)</script>"
    ]
    for payload in tqdm(xss_payloads, desc="Checking XSS"):
        test_url = url + ("/" if not url.endswith("/") else "") + payload
        try:
            start_time = datetime.now()
            response = requests.get(test_url, allow_redirects=True)
            response_time = (datetime.now() - start_time).total_seconds()
            if payload in response.text:
                print(f"Payload '{payload}' indicates potential XSS vulnerability.")
                results['xss'] = {"vulnerable": True, "payload": payload, "response_time": response_time}
                return True
        except requests.exceptions.RequestException as e:
            print(f"Error checking XSS on {test_url}: {e}")
    results['xss'] = {"vulnerable": False}
    return False

# Function to check for CSRF vulnerability
def check_csrf(url):
    csrf_payload = {"param": "value"}
    headers = {"Referer": "http://evil.com"}
    try:
        tqdm.write("Checking CSRF...")
        start_time = datetime.now()
        response = requests.post(url, data=csrf_payload, headers=headers, allow_redirects=True)
        response_time = (datetime.now() - start_time).total_seconds()
        if response.status_code == 200:
            print("CSRF vulnerability check passed (status code 200).")
            results['csrf'] = {"vulnerable": True, "response_time": response_time}
            return True
    except requests.exceptions.RequestException as e:
        print(f"Error checking CSRF on {url}: {e}")
    results['csrf'] = {"vulnerable": False}
    return False

# Function to check for missing security headers
def check_security_headers(url):
    headers_to_check = [
        "Content-Security-Policy", "Strict-Transport-Security", "X-Content-Type-Options",
        "X-Frame-Options", "X-XSS-Protection", "Referrer-Policy"
    ]
    missing_headers = []
    try:
        response = requests.get(url, allow_redirects=True)
        for header in headers_to_check:
            if header not in response.headers:
                missing_headers.append(header)
        if missing_headers:
            print(f"Missing security headers: {', '.join(missing_headers)}")
            results['security_headers'] = {"missing": missing_headers}
            return True
    except requests.exceptions.RequestException as e:
        print(f"Error checking security headers on {url}: {e}")
    results['security_headers'] = {"missing": []}
    return False

# Main function to parse arguments and run checks
def main():
    parser = argparse.ArgumentParser(description="XRET Vulnerability Scanner")
    parser.add_argument("url", help="URL of the website to scan")
    parser.add_argument("--show", action="store_true", help="Show available tests and descriptions")
    parser.add_argument("--output", help="Output file to save the results", default="xret_results.json")
    parser.add_argument("--checks", nargs='+', help="Specify which checks to run (sql_injection, xss, csrf, headers)", default=["sql_injection", "xss", "csrf", "headers"])
    args = parser.parse_args()

    if args.show:
        print("""
        Available tests:
        1. SQL Injection: Checks if the website is vulnerable to SQL Injection attacks.
        2. XSS (Cross-Site Scripting): Checks if the website is vulnerable to XSS attacks.
        3. CSRF (Cross-Site Request Forgery): Checks if the website is vulnerable to CSRF attacks.
        4. Security Headers: Checks if the website is missing important security headers.
        """)
        return

    url = args.url
    if not (url.startswith("http://") or url.startswith("https://")):
        print("Invalid URL. Please include http:// or https://")
        return

    if "sql_injection" in args.checks and check_sql_injection(url):
        print("The website is vulnerable to SQL Injection.")
    else:
        print("The website is not vulnerable to SQL Injection.")

    if "xss" in args.checks and check_xss(url):
        print("The website is vulnerable to XSS.")
    else:
        print("The website is not vulnerable to XSS.")

    if "csrf" in args.checks and check_csrf(url):
        print("The website is vulnerable to CSRF.")
    else:
        print("The website is not vulnerable to CSRF.")

    if "headers" in args.checks and check_security_headers(url):
        print("The website is missing some security headers.")
    else:
        print("The website has all essential security headers.")

    # Save results to file
    with open(args.output, 'w') as f:
        json.dump(results, f, indent=4)

    print(f"Results saved to {args.output}")

if __name__ == "__main__":
    main()
